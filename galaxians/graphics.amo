
# ***********************************************************************************
#
#			Load VRAM from memory address to page:target address, count bytes.
#
# ***********************************************************************************

fast 

proc load.vram(from,page,to,count) {
	times (count) {
		poke.v(page,to,peek.b(from))
		from ++ -> from
		to ++ -> to
	}
}

# ***********************************************************************************
#
#							Load in a spritesn.bin file
#
# ***********************************************************************************

proc load.data(spriteFile,page1addr) {
	spriteFile
	[["DA7AAA A90C20BDFF"]]						# phx ply tax lda #12 jsr $FFBD
	[["A901A208A00020BAFF"]]					# lda #1,ldx #8,ldy #0, jsr $FFBA
	[["A900A200A0A020D5FF"]]					# lda #0,ldx #$0,ldy #$A0, jsr $FFD5
	load.vram($A000,1,$FA00,32)					# load standard palette
	load.vram($A000,1,page1addr,spr.bytes) 		# load the data in.
}

slow

# ***********************************************************************************
#
#		Event trigger. if (pEvent) is zero initialise, if timed out reinitialise
#		and return true.
#
# ***********************************************************************************

fast 

func event(pEvent,rate) {
	var p,r peek.w(pEvent) -> p false->r
	if (p == 0) { 
		read.timer()=>p 
	}
	if (read.timer()-p >= 0) {
		p +rate => p
		true -> r
	}
	poke.w(pEvent,p)
	r
}

slow
