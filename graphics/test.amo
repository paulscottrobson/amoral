#
#		Load VRAM from memory address to page:target address, count bytes.
#
fast proc load.vram(from,page,to,count) {
	times (count) {
		poke.v(page,to,peek.b(from))
		from ++ -> from
		to ++ -> to
	}
}
#
#		Load in a spritesn.bin file
#
fast proc load.data(s) {
	[["DA7AAA A90C20BDFF"]]			# phx ply tax lda #12 jsr $FFBD
	[["A901A208A00020BAFF"]]		# lda #1,ldx #8,ldy #0, jsr $FFBA
	[["A900A200A0A020D5FF"]]		# lda #0,ldx #$0,ldy #$A0, jsr $FFD5
	load.vram($A000,1,$FA00,32)		# load standard palette
	load.vram($A000,1,0,spr.bytes) 	# load the data in.
}

slow

proc init.sprite(spr,y) {
	poke.vw(1,spr,spr.mario.64x64)	# Address / 32 in first two bytes.
	poke.vw(1,spr+2,random() & $FF) # X
	poke.vw(1,spr+4,y)				# Y
	poke.v(1,spr+6,$0C)				# position 11, no flips.
	poke.v(1,spr+7,$F0) 			# 64x64 4 colour

}

const MARIO.COUNT 40
const MARIO.GAP 4

proc main() {
	var n

	print.character($90)
	print.character(1)
	print.character(147)

	poke.b($9f29,$61)				# layer 2 on sprites on
	poke.b($9f2a,$40)				# double normal scale
	poke.b($9f2b,$40)

	load.data("sprites0.bin")

	times(16,n) {
		poke.v(0,n<<,$2A)
		poke.v(0,n<<++,n)
	}

	times(MARIO.COUNT,n) {
		init.sprite(n << << << + $FC00,n*MARIO.GAP)
	}

	var x,xa
	while (0 == 0) {
		times(MARIO.COUNT,n) {
			n << << << + $FC02 -> xa
			peek.v(1,xa) -> x
			poke.v(1,xa,n & 3 + x ++)
		}
		x ++ & $FF -> x
	}
}
